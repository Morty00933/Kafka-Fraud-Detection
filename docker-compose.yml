name: kafkafrauddetection

services:
  # ───────────────────────────── Kafka (Redpanda) ─────────────────────────────
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: ${COMPOSE_PROJECT_NAME:-kafkafrauddetection}-redpanda-1
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - 1G
      - --reserve-memory
      - 0M
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - 0.0.0.0:9092
      - --advertise-kafka-addr
      - redpanda:9092
      - --pandaproxy-addr
      - 0.0.0.0:8082
      - --advertise-pandaproxy-addr
      - redpanda:8082
      - --rpc-addr
      - 0.0.0.0:33145
      - --advertise-rpc-addr
      - redpanda:33145
      - --mode
      - dev-container
    ports:
      - "9092:9092"   # Kafka API
      - "9644:9644"   # Admin/metrics Redpanda
      - "8082:8082"   # (опц.) Pandaproxy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9644/v1/status/ready || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 30
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    restart: unless-stopped

  # ───────────────────────────── Redis ─────────────────────────────
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-kafkafrauddetection}-redis-1
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  # ───────────────────────────── Postgres ─────────────────────────────
  postgres:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-kafkafrauddetection}-postgres-1
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: fraud
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d fraud"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped

  # ───────────────────────────── Detector ─────────────────────────────
  detector:
    build:
      context: .
      dockerfile: services/detector/Dockerfile
      # Если нужен корпоративный прокси на этапе build — раскомментируй:
      # args:
      #   HTTP_PROXY: http://http.docker.internal:3128
      #   HTTPS_PROXY: http://http.docker.internal:3128
      #   NO_PROXY: redpanda,redis,postgres,localhost,127.0.0.1
    environment:
      # Kafka
      - KAFKA_BOOTSTRAP=redpanda:9092
      - TOPIC_TRANSACTIONS=transactions.v1
      - GROUP_ID=fraud-detector
      # Redis
      - REDIS_HOST=redis
      # Postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=fraud
      # HTTP/метрики
      - HOST=0.0.0.0
      - PORT=8080
      - PROMETHEUS_PORT=9000
      # Модель
      - MODEL_STRATEGY=iforest
      - IF_CONTAMINATION=0.02
      - IF_TREES=200
      - IF_RETRAIN_EVERY=2000
      - IF_BUFFER_MAX=50000
    depends_on:
      redpanda:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"  # REST API: /health, /alerts
      - "9000:9000"  # Prometheus metrics
    restart: unless-stopped

  # ───────────────────────────── Producer (генератор) ─────────────────────────────
  producer:
    build:
      context: .
      dockerfile: services/producer/Dockerfile
      # args:
      #   HTTP_PROXY: http://http.docker.internal:3128
      #   HTTPS_PROXY: http://http.docker.internal:3128
      #   NO_PROXY: redpanda,redis,postgres,localhost,127.0.0.1
    environment:
      - KAFKA_BOOTSTRAP=redpanda:9092
      - TOPIC_TRANSACTIONS=transactions.v1
      - RATE_PER_SEC=50   # скорость генерации
    depends_on:
      redpanda:
        condition: service_healthy
    restart: unless-stopped

volumes:
  redpanda_data:
  pg_data:
